@startuml

interface IFifoWriter {
	+virtual void startWrite()
	+virtual void stopWrite()
	+virtual void pushData(const void* data, size_t sizeN)
	+virtual bool getWaitConnect()

}



class FifoWriteDirect
class FifoWriteQ

FifoWriteDirect --|> IFifoWriter
FifoWriteQ --|> IFifoWriter

class FifoRead {
	+void startRead()
	+void stopRead()
	+bool  getWaitConnect() const
}

class Fifo {
	+bool getWaitConnectRead() const
	+bool getWaitConnectWrite() const
	+void write(const void* data, size_t sizeInBytes)
	+void start()
	+void stop()
	+void closeRead()
	+void closeWrite()
    +void configReconnect()
	-FifoRead fifoRead;
    -std::unique_ptr<IFifoWriter> fifoWrite;
}

FifoRead o--Fifo
IFifoWriter o--Fifo



class Server {


	+void setReadHandler(ReadHandler h)
	+void setConnectHandler(EventHandler h)
	+void setDisconnectHandler(EventHandler h)

	+void write(ConnectionId id, const void* data, size_t sizeInBytes)
	+void start()
	+void stop()
    +void disconnect(ConnectionId id)


	-std::map<size_t, FifoCfg> fifoCfgTable
	-std::map<size_t, std::unique_ptr<Fifo>> connectionTable

}
Fifo o--Server

class Client {

	+void start()
	+void stop()
	+void write(const void* data, size_t sizeN)
	+void setReadHandler(FifoRead::ReadHandler h)
	+void setConnectHandler(EventHandler h)
	+void setDisconnectHandler(EventHandler h)
    -std::unique_ptr<Fifo> client
}

Fifo o--Client

@enduml